name: Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-quality-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Check code formatting with black
        run: |
          black --check --diff --color .

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check for other issues but don't fail the build
          flake8 . --count --max-complexity=10 --max-line-length=88 --statistics \
                 --exclude=venv,build,dist,.git,__pycache__,.pytest_cache,.mypy_cache

      - name: Type check with mypy
        run: |
          mypy . --ignore-missing-imports --no-strict-optional --exclude='(venv|build|dist)/'
        continue-on-error: true

      - name: Check import sorting with isort
        run: |
          pip install isort
          isort . --check-only --diff
        continue-on-error: true

      - name: Security scan with bandit
        run: |
          bandit -r . -ll -f json -o bandit-report.json || true
          bandit -r . -ll  # Display results
        continue-on-error: true

      - name: Check for common security issues
        run: |
          # Check for hardcoded secrets/passwords
          echo "Checking for potential hardcoded secrets..."
          if grep -r "password\s*=" --include="*.py" . | grep -v test | grep -v example; then
            echo "⚠️  Found potential hardcoded passwords"
          fi

          if grep -r "secret\s*=" --include="*.py" . | grep -v test | grep -v example; then
            echo "⚠️  Found potential hardcoded secrets"
          fi

          if grep -r "token\s*=" --include="*.py" . | grep -v test | grep -v example; then
            echo "⚠️  Found potential hardcoded tokens"
          fi

          echo "✅ Security check completed"
        continue-on-error: true

      - name: Check documentation strings
        run: |
          pip install pydocstyle
          pydocstyle . --convention=google --add-ignore=D100,D104,D105,D107 || true
        continue-on-error: true

      - name: Upload code quality artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-quality-reports
          path: |
            bandit-report.json
          retention-days: 30
