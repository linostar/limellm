name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

      - name: Type check with mypy
        run: |
          mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true # Don't fail the build on mypy errors for now

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v --tb=short

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short

      - name: Run all tests with coverage
        run: |
          pip install pytest-cov
          python -m pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-gpu:
    runs-on: ubuntu-latest
    # Only run GPU tests if we have GPU-specific tests
    if: false # Disable for now since we don't have GPU runners

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run GPU tests
        run: |
          python -m pytest tests/ -m gpu -v

  test-slow:
    runs-on: ubuntu-latest
    # Only run slow tests on main branch or if specifically requested
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'run-slow-tests')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run slow tests
        run: |
          python -m pytest tests/ -m slow -v --tb=short

  test-network:
    runs-on: ubuntu-latest
    # Only run network tests on main branch pushes
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run network tests
        run: |
          python -m pytest tests/ -m network -v
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        run: |
          safety check --json || true

      - name: Run bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 30

  build-status:
    runs-on: ubuntu-latest
    needs: [test, test-slow, security-scan]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Main tests failed"
            exit 1
          fi

          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "Security scan failed"
            exit 1
          fi

          echo "All required checks passed!"
